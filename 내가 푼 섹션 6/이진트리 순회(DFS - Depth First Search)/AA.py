
import sys
sys.stdin=open("input.txt","r")

# 트리 구조를 탐색할 때는 DFS와 BFS가 존재한다.
# 재귀를 이용해서 깊이 우선 탐색을 하자

# 트리 -> 부모 노드와 자식 노드로 이루어져있다.

# 전위 순회 방식은 맨 위 노드에서 왼쪽 자식으로 가서 
# 밑이 있으면 계속 파고 들어가고 아래가 없으면 선회하는 것이다.

# 트리 레벨 순으로 탐색하면 BFS -> 큐 사용
# 트리를 깊이 파고 들어가면 DFS -> 재귀 함수 사용(재귀가 곧 스택)
 
# 부 -> 왼 -> 오 == 전위 순회
# 왼 -> 부 -> 오 == 중위 순회
# 왼 -> 오 -> 부 == 후위 순회

# 중요!
# 이 문제에서 왼쪽 자식 노드는 부모 노드 * 2 이고
# 오른 쪽 자식 노드는 부모 노드 * 2 + 1 이다.

# 전위 순회
def DFS_Front(v):
    if v>7:
        return
    else:
        # 먼저 출력하고 그 다음에 순회 돕시다.
        print(v,end="") # 방문
        # 호출 하기 전에 체크를 하거나 값을 넣거나 출력할 때 앞에 오면 전위다.

        # 부모 노드 값에 곱하기 2 => 왼쪽 자식 노드
        # 왼쪽 자식 먼저
        DFS_Front(v*2)
        # 부모 노드 값에 곱하기 2 + 1=> 오른쪽 자식 노드
        # 오른 쪽 자식 다음
        DFS_Front(v*2+1)

def DFS_Middle(v):
    if v>7:
        return
    else:
        DFS_Middle(v*2)
        print(v,end='')
        DFS_Middle(v*2+1)

# 중요
# 병합 정렬의 경우 후위 순회를 사용하므로 이를 잘 기억하자
def DFS_back(v):
    if v>7:
        return
    else:
        # 상태 트리 깊이 우선 탐색
        DFS_Middle(v*2)
        DFS_Middle(v*2+1)
        print(v,end='')

# 출발 점이 4라고 해서 4먼저 넣는게 아니다.
# 기본적으로 출력 혹은 저장하는 위치에 따라 전위, 중위, 후위가 달라진다.
        



if __name__ == "__main__":
    # 부모 노드 출발
    # 전위 순회
    DFS_Front(1)
    print()
    print("---------")
    # 중위 순회
    DFS_Middle(1)
    print()
    print("---------")
    # 후위 순회
    DFS_back(1)